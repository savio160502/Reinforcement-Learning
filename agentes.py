# Este arquivo contém a definição dos agentes codificador e revisor

import ollama

class LLMAgent:
    def __init__(self, model="llama3.1"):
        self.model = model
        self.memory = []  # Armazena o histórico de interações

    def generate(self, prompt):
        # Integra o histórico de memória ao prompt
        memory_context = "\n".join([f"{item['role']}: {item['content']}" for item in self.memory])
        full_prompt = f"{memory_context}\n{prompt}"
        
        messages = [{'role': 'user', 'content': full_prompt}]
        response = ollama.chat(model=self.model)
        self.memory.append({'role': 'user', 'content': prompt})
        self.memory.append({'role': 'assistant', 'content': response['response']})
        
        return response

class Coder(LLMAgent):
    def __init__(self, model="llama3.1", problem_description=""):
        super().__init__(model)
        self.base_prompt = (
            "You are a Python developer and data scientist. "
            "Your job is to write code to solve data-science problems. "
            "Be concise and make sure to document your code."
        )
        self.problem_description = problem_description

    def generate_code(self, task_description):
        """
        Produz código baseado no prompt.

        :param task_description: descrição da tarefa de programação.
        :return: Código gerado como uma string.
        """
        prompt = f"{self.base_prompt} Considering the following problem: {self.problem_description}\n\n{task_description}"
        response = self.generate(prompt)
        return response['response']

class Revisor(LLMAgent):
    def __init__(self, model="llama3.1", problem_description=""):
        super().__init__(model)
        self.base_prompt = (
            "You are a Senior Python developer and data scientist. "
            "Your role is to review code generated by other developers and propose improvements like: "
            "refactoring, optimization, and best practices."
        )
        self.problem_description = problem_description

    def _analise_estatica(self, code):
        """Realiza análises estáticas no código."""
        # TODO: Implementar análise estática utilizando ferramentas como Mypy, Ruff, Bandit.
        return "No issues found."

    def review_code(self, code):
        """
        Revisa o código e retorna feedback.

        :param code: Código a ser revisado.
        :return: Feedback (string).
        """
        # Realiza análise estática
        resultados = self._analise_estatica(code)
        # Gera feedback incorporando resultados da análise estática
        prompt = f"{self.base_prompt} Considering the following problem: {self.problem_description}\n\nReview the code below and provide feedback to the coder:\n{code}\n\nStatic Analysis Results: {resultados}"
        feedback = self.generate(prompt)
        return feedback['response']
